{
 "Description": "(SO0219) Clickstream Analytics on AWS (Version v1.1.6)(Build 202406280046)- Control Plane",
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "Authentication Information"
     },
     "Parameters": [
      "Email"
     ]
    },
    {
     "Label": {
      "default": "IAM Role Information"
     },
     "Parameters": [
      "IamRolePrefix",
      "IamRoleBoundaryArn"
     ]
    }
   ],
   "ParameterLabels": {
    "Email": {
     "default": "Admin User Email"
    },
    "IamRolePrefix": {
     "default": "IAM Role Prefix(Optional)"
    },
    "IamRoleBoundaryArn": {
     "default": "IAM Role Boundary ARN(Optional)"
    }
   }
  },
  "cdk_nag": {
   "rules_to_suppress": [
    {
     "reason": "LogRetention lambda role which are created by CDK uses AWSLambdaBasicExecutionRole",
     "id": "AwsSolutions-IAM4"
    },
    {
     "reason": "The lambda is created by CDK, CustomResource framework-onEvent, the runtime version will be upgraded by CDK",
     "id": "AwsSolutions-L1"
    },
    {
     "reason": "The SQS is a dead-letter queue (DLQ), and does not need a DLQ enabled",
     "id": "AwsSolutions-SQS3"
    },
    {
     "reason": "Cause by CDK BucketDeployment construct (aws-cdk-lib/aws-s3-deployment)",
     "id": "AwsSolutions-IAM4"
    },
    {
     "reason": "Cause by CDK BucketDeployment construct (aws-cdk-lib/aws-s3-deployment)",
     "id": "AwsSolutions-IAM5"
    },
    {
     "reason": "The REST API input validation in Lambda(Express) code, the front ApiGateway does not need repeated validation.",
     "id": "AwsSolutions-APIG2"
    },
    {
     "reason": "The REST API validate input via OIDC authorizer, there is no need to use Cognito user pool authorizer.",
     "id": "AwsSolutions-COG4"
    },
    {
     "reason": "Cause by using default default CloudFront viewer certificate",
     "id": "AwsSolutions-CFR4"
    },
    {
     "reason": "Managed by CDK Cognito module for get service token",
     "id": "AwsSolutions-L1"
    }
   ]
  }
 },
 "Resources": {
  "ClickstreamSolutionDataBucket200465FE": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "AccessControl": "LogDeliveryWrite",
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "PUT",
        "POST",
        "GET"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "ExposedHeaders": [
        "x-amz-server-side-encryption",
        "x-amz-request-id",
        "x-amz-id-2",
        "ETag"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "LoggingConfiguration": {
     "LogFilePrefix": "data-bucket-access-logs"
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "ObjectWriter"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickstreamSolution/DataBucket/Resource"
   }
  },
  "ClickstreamSolutionDataBucketPolicy05271F62": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "ClickstreamSolutionDataBucket200465FE"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickstreamSolutionDataBucket200465FE",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickstreamSolutionDataBucket200465FE",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickstreamSolution/DataBucket/Policy/Resource"
   }
  },
  "FrontRewriteFunction560E1714": {
   "Type": "AWS::CloudFront::Function",
   "Properties": {
    "AutoPublish": true,
    "FunctionCode": "function handler(event) {\n  var request = event.request;\n  var uri = request.uri;\n  if (uri.startsWith('/signin') || \n    uri.startsWith('/projects') || \n    uri.startsWith('/project') || \n    uri.startsWith('/pipelines') || \n    uri.startsWith('/plugins') || \n    uri.startsWith('/alarms') || \n    uri.startsWith('/user') || \n    uri.startsWith('/analytics') || \n    uri.startsWith('/quicksight')) {\n      request.uri = '/index.html'; \n  }\n  return request; \n}",
    "FunctionConfig": {
     "Comment": {
      "Fn::Join": [
       "",
       [
        "FrontRewriteFunction-",
        {
         "Ref": "AWS::Region"
        },
        "-",
        {
         "Fn::Select": [
          0,
          {
           "Fn::Split": [
            "-",
            {
             "Fn::Select": [
              2,
              {
               "Fn::Split": [
                "/",
                {
                 "Ref": "AWS::StackId"
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      ]
     },
     "Runtime": "cloudfront-js-1.0"
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "FrontRewriteFunction-",
       {
        "Ref": "AWS::Region"
       },
       "-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/FrontRewriteFunction/Resource"
   }
  },
  "responseheaderspolicy35100ADE": {
   "Type": "AWS::CloudFront::ResponseHeadersPolicy",
   "Properties": {
    "ResponseHeadersPolicyConfig": {
     "Name": {
      "Fn::Join": [
       "",
       [
        "clickstream-response_header-policy-",
        {
         "Ref": "AWS::Region"
        },
        "-",
        {
         "Fn::Select": [
          0,
          {
           "Fn::Split": [
            "-",
            {
             "Fn::Select": [
              2,
              {
               "Fn::Split": [
                "/",
                {
                 "Ref": "AWS::StackId"
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      ]
     },
     "SecurityHeadersConfig": {
      "ContentSecurityPolicy": {
       "ContentSecurityPolicy": {
        "Fn::Join": [
         "",
         [
          "default-src 'self' data:; upgrade-insecure-requests; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self'; connect-src 'self' https://cognito-idp.",
          {
           "Ref": "AWS::Region"
          },
          ".amazonaws.com *.auth.",
          {
           "Ref": "AWS::Region"
          },
          ".amazoncognito.com ",
          {
           "Fn::GetAtt": [
            "ClickstreamSolutionDataBucket200465FE",
            "DomainName"
           ]
          },
          " ",
          {
           "Fn::GetAtt": [
            "ClickstreamSolutionDataBucket200465FE",
            "RegionalDomainName"
           ]
          },
          "; frame-src *.quicksight.",
          {
           "Ref": "AWS::Partition"
          },
          ".amazon.com cn-north-1.quicksight.amazonaws.cn cn-northwest-1.quicksight.amazonaws.cn;"
         ]
        ]
       },
       "Override": true
      },
      "ContentTypeOptions": {
       "Override": true
      },
      "FrameOptions": {
       "FrameOption": "DENY",
       "Override": true
      },
      "ReferrerPolicy": {
       "Override": true,
       "ReferrerPolicy": "no-referrer"
      },
      "StrictTransportSecurity": {
       "AccessControlMaxAgeSec": 600,
       "IncludeSubdomains": true,
       "Override": true
      },
      "XSSProtection": {
       "ModeBlock": true,
       "Override": true,
       "Protection": true
      }
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/response_headers_policy/Resource"
   }
  },
  "cloudfrontcontrolplaneportalbucket1534502E": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "AccessControl": "LogDeliveryWrite",
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "LoggingConfiguration": {
     "DestinationBucketName": {
      "Ref": "ClickstreamSolutionDataBucket200465FE"
     },
     "LogFilePrefix": "portal-bucket-access-log/"
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "ObjectWriter"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "aws-cdk:cr-owned:2ba3118a",
      "Value": "true"
     },
     {
      "Key": "aws-cdk:cr-owned:9a343ac8",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/portal_bucket/Resource"
   }
  },
  "cloudfrontcontrolplaneportalbucketPolicy525DAD23": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "cloudfrontcontrolplaneportalbucket1534502E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "cloudfrontcontrolplaneportalbucket1534502E",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "cloudfrontcontrolplaneportalbucket1534502E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "cloudfrontcontrolplaneportalbucket1534502E",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "cloudfrontcontrolplanePortalDistributionOrigin1S3Origin79E734AC",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "cloudfrontcontrolplaneportalbucket1534502E",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      },
      {
       "Action": "s3:GetObject",
       "Condition": {
        "StringEquals": {
         "AWS:SourceArn": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":cloudfront::",
            {
             "Ref": "AWS::AccountId"
            },
            ":distribution/",
            {
             "Ref": "cloudfrontcontrolplanePortalDistributionCAE911E8"
            }
           ]
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudfront.amazonaws.com"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "cloudfrontcontrolplaneportalbucket1534502E",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/portal_bucket/Policy/Resource"
   }
  },
  "cloudfrontcontrolplaneportalbucketAutoDeleteObjectsCustomResource43E2DB9D": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
    }
   },
   "DependsOn": [
    "cloudfrontcontrolplaneportalbucketPolicy525DAD23"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/portal_bucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "cloudfrontcontrolplaneoriginaccesscontrol66E2793E": {
   "Type": "AWS::CloudFront::OriginAccessControl",
   "Properties": {
    "OriginAccessControlConfig": {
     "Name": {
      "Fn::Join": [
       "",
       [
        "clickstream-controlplane-oac-",
        {
         "Ref": "AWS::Region"
        },
        "-",
        {
         "Fn::Select": [
          0,
          {
           "Fn::Split": [
            "-",
            {
             "Fn::Select": [
              2,
              {
               "Fn::Split": [
                "/",
                {
                 "Ref": "AWS::StackId"
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      ]
     },
     "OriginAccessControlOriginType": "s3",
     "SigningBehavior": "always",
     "SigningProtocol": "sigv4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/origin_access_control"
   }
  },
  "cloudfrontcontrolplanedefaultCachePolicy7107D442": {
   "Type": "AWS::CloudFront::CachePolicy",
   "Properties": {
    "CachePolicyConfig": {
     "DefaultTTL": 604800,
     "MaxTTL": 2592000,
     "MinTTL": 0,
     "Name": {
      "Fn::Join": [
       "",
       [
        "cachepolicy-",
        {
         "Ref": "AWS::Region"
        },
        "-",
        {
         "Fn::Select": [
          0,
          {
           "Fn::Split": [
            "-",
            {
             "Fn::Select": [
              2,
              {
               "Fn::Split": [
                "/",
                {
                 "Ref": "AWS::StackId"
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      ]
     },
     "ParametersInCacheKeyAndForwardedToOrigin": {
      "CookiesConfig": {
       "CookieBehavior": "none"
      },
      "EnableAcceptEncodingBrotli": false,
      "EnableAcceptEncodingGzip": false,
      "HeadersConfig": {
       "HeaderBehavior": "none"
      },
      "QueryStringsConfig": {
       "QueryStringBehavior": "none"
      }
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/defaultCachePolicy/Resource"
   }
  },
  "cloudfrontcontrolplanePortalDistributionOrigin1S3Origin79E734AC": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Identity for cloudfronts3controlplanestackglobalcloudfrontcontrolplanePortalDistributionOrigin128533401"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/PortalDistribution/Origin1/S3Origin/Resource"
   }
  },
  "cloudfrontcontrolplanePortalDistributionCAE911E8": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "Aliases": [],
     "CacheBehaviors": [
      {
       "AllowedMethods": [
        "GET",
        "HEAD",
        "OPTIONS",
        "PUT",
        "PATCH",
        "POST",
        "DELETE"
       ],
       "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
       "Compress": true,
       "OriginRequestPolicyId": {
        "Ref": "ApiGatewayOriginRequestPolicy339DF282"
       },
       "PathPattern": {
        "Fn::Join": [
         "",
         [
          "/",
          {
           "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
          },
          "/*"
         ]
        ]
       },
       "TargetOriginId": "cloudfronts3controlplanestackglobalcloudfrontcontrolplanePortalDistributionOrigin249EB2591",
       "ViewerProtocolPolicy": "redirect-to-https"
      }
     ],
     "Comment": "CloudFront distribution for (SO0219) Clickstream Analytics on AWS (Version v1.1.6)(Build 202406280046)- Control Plane",
     "DefaultCacheBehavior": {
      "AllowedMethods": [
       "GET",
       "HEAD"
      ],
      "CachePolicyId": {
       "Ref": "cloudfrontcontrolplanedefaultCachePolicy7107D442"
      },
      "CachedMethods": [
       "GET",
       "HEAD"
      ],
      "Compress": true,
      "FunctionAssociations": [
       {
        "EventType": "viewer-request",
        "FunctionARN": {
         "Fn::GetAtt": [
          "FrontRewriteFunction560E1714",
          "FunctionARN"
         ]
        }
       }
      ],
      "ResponseHeadersPolicyId": {
       "Ref": "responseheaderspolicy35100ADE"
      },
      "TargetOriginId": "cloudfronts3controlplanestackglobalcloudfrontcontrolplanePortalDistributionOrigin128533401",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2and3",
     "IPV6Enabled": false,
     "Logging": {
      "Fn::If": [
       "cloudfrontcontrolplanenotOpsInRegionFA8E79C7",
       {
        "Bucket": {
         "Fn::GetAtt": [
          "ClickstreamSolutionDataBucket200465FE",
          "RegionalDomainName"
         ]
        },
        "Prefix": "cloudfront-access-log"
       },
       {
        "Ref": "AWS::NoValue"
       }
      ]
     },
     "Origins": [
      {
       "DomainName": {
        "Fn::GetAtt": [
         "cloudfrontcontrolplaneportalbucket1534502E",
         "RegionalDomainName"
        ]
       },
       "Id": "cloudfronts3controlplanestackglobalcloudfrontcontrolplanePortalDistributionOrigin128533401",
       "OriginAccessControlId": {
        "Fn::GetAtt": [
         "cloudfrontcontrolplaneoriginaccesscontrol66E2793E",
         "Id"
        ]
       },
       "S3OriginConfig": {
        "OriginAccessIdentity": ""
       }
      },
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "https-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::Select": [
         2,
         {
          "Fn::Split": [
           "/",
           {
            "Fn::Join": [
             "",
             [
              "https://",
              {
               "Ref": "ClickStreamApi748490D9"
              },
              ".execute-api.",
              {
               "Ref": "AWS::Region"
              },
              ".",
              {
               "Ref": "AWS::URLSuffix"
              },
              "/",
              {
               "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
              },
              "/"
             ]
            ]
           }
          ]
         }
        ]
       },
       "Id": "cloudfronts3controlplanestackglobalcloudfrontcontrolplanePortalDistributionOrigin249EB2591",
       "OriginPath": {
        "Fn::Join": [
         "",
         [
          "/",
          {
           "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
          }
         ]
        ]
       }
      }
     ],
     "PriceClass": "PriceClass_200"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/PortalDistribution/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W70",
       "reason": "suppress minium TLSv1.2 warning when using default certificate/domain name of cloudfront"
      }
     ]
    }
   }
  },
  "cloudfrontcontrolplaneportaldeployAwsCliLayerE6343FE0": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/portal_deploy/AwsCliLayer/Resource",
    "aws:asset:path": "asset.3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "cloudfrontcontrolplaneportaldeployCustomResource3FBC8A44": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     {
      "Fn::Sub": "solutions-${AWS::Region}"
     }
    ],
    "SourceObjectKeys": [
     "clickstream-analytics-on-aws/v1.1.6/b760fbe58e0b9dd738f1da44df3320c0f4a0b11a5973914b74ec6e7bf65cd50b.zip",
     "clickstream-analytics-on-aws/v1.1.6/9ca537188c32e9c32d26f04e1267adc41fbf059328a6112b6535469450bead71.zip"
    ],
    "SourceMarkers": [
     {},
     {
      "<<marker:0xbaba:0>>": {
       "Ref": "AWS::Region"
      },
      "<<marker:0xbaba:1>>": {
       "Ref": "userPoolDC9497E0"
      },
      "<<marker:0xbaba:2>>": {
       "Ref": "clickstreambackendclient721D6562"
      },
      "<<marker:0xbaba:3>>": {
       "Fn::GetAtt": [
        "cloudfrontcontrolplanePortalDistributionCAE911E8",
        "DomainName"
       ]
      },
      "<<marker:0xbaba:4>>": {
       "Ref": "ClickstreamSolutionDataBucket200465FE"
      },
      "<<marker:0xbaba:5>>": {
       "Ref": "AWS::Region"
      },
      "<<marker:0xbaba:6>>": {
       "Ref": "userPoolcognitodomain5F5914A6"
      },
      "<<marker:0xbaba:7>>": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "DestinationBucketName": {
     "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
    },
    "Prune": false,
    "SystemMetadata": {
     "cache-control": "max-age=2592000, immutable"
    },
    "DistributionId": {
     "Ref": "cloudfrontcontrolplanePortalDistributionCAE911E8"
    },
    "DistributionPaths": [
     "/index.html",
     "/asset-manifest.json",
     "/robots.txt",
     "/aws-exports.json",
     "/locales/*"
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/portal_deploy/CustomResource/Default"
   }
  },
  "cloudfrontcontrolplaneportalhtmldeployAwsCliLayerAC9CB96A": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/portal_html_deploy/AwsCliLayer/Resource",
    "aws:asset:path": "asset.3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "cloudfrontcontrolplaneportalhtmldeployCustomResourceB065A9C8": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     {
      "Fn::Sub": "solutions-${AWS::Region}"
     }
    ],
    "SourceObjectKeys": [
     "clickstream-analytics-on-aws/v1.1.6/c254aaa57abd8225a85ea783675d35fb9431b74241275a24e1f2c637ac86164e.zip"
    ],
    "DestinationBucketName": {
     "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
    },
    "Prune": false,
    "SystemMetadata": {
     "cache-control": "max-age=0"
    },
    "DistributionId": {
     "Ref": "cloudfrontcontrolplanePortalDistributionCAE911E8"
    },
    "DistributionPaths": [
     "/index.html",
     "/asset-manifest.json",
     "/robots.txt",
     "/aws-exports.json",
     "/locales/*"
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/cloudfront_control_plane/portal_html_deploy/CustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-esourceProviderRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/2eb6a831b107939f63cfebf68e6316e1a40f79fc99cae0fee9b333bac8d29bc4.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.2eb6a831b107939f63cfebf68e6316e1a40f79fc99cae0fee9b333bac8d29bc4",
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by S3AutoDeleteObjects for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by S3AutoDeleteObjects for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-9EB8756CServiceRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "solutions-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "solutions-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "cloudfrontcontrolplaneportalbucket1534502E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "cloudfrontcontrolplaneportalbucket1534502E",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "cloudfront:GetInvalidation",
        "cloudfront:CreateInvalidation"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Policy is generated by CDK built-in BucketDeployment, * cloudFront resources for read only access or IAM limitation."
      }
     ]
    }
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "cloudfrontcontrolplaneportaldeployAwsCliLayerE6343FE0"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
    "aws:asset:path": "asset.2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by CDK built-in BucketDeployment for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by CDK built-in BucketDeployment for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "userPoolDC9497E0": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_phone_number",
       "Priority": 1
      },
      {
       "Name": "verified_email",
       "Priority": 2
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": true,
     "InviteMessageTemplate": {
      "EmailMessage": "Hello {username}, your temporary password for ClickStream Analytics on AWS Solution is {####}",
      "EmailSubject": "Welcome to use Clickstream Analytics on AWS solution"
     }
    },
    "AutoVerifiedAttributes": [
     "email"
    ],
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "Policies": {
     "PasswordPolicy": {
      "MinimumLength": 8,
      "RequireLowercase": true,
      "RequireNumbers": true,
      "RequireSymbols": true,
      "RequireUppercase": true
     }
    },
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "UserPoolAddOns": {
     "AdvancedSecurityMode": "ENFORCED"
    },
    "UsernameAttributes": [
     "email"
    ],
    "UsernameConfiguration": {
     "CaseSensitive": false
    },
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/userPool/Resource"
   }
  },
  "userPoolcognitodomain5F5914A6": {
   "Type": "AWS::Cognito::UserPoolDomain",
   "Properties": {
    "Domain": {
     "Fn::Join": [
      "",
      [
       "clickstream",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "UserPoolId": {
     "Ref": "userPoolDC9497E0"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/userPool/cognito-domain/Resource"
   }
  },
  "clickstreambackendclient721D6562": {
   "Type": "AWS::Cognito::UserPoolClient",
   "Properties": {
    "AllowedOAuthFlows": [
     "implicit",
     "code"
    ],
    "AllowedOAuthFlowsUserPoolClient": true,
    "AllowedOAuthScopes": [
     "openid",
     "email",
     "profile"
    ],
    "CallbackURLs": [
     {
      "Fn::Join": [
       "",
       [
        "https://",
        {
         "Fn::GetAtt": [
          "cloudfrontcontrolplanePortalDistributionCAE911E8",
          "DomainName"
         ]
        },
        "/signin"
       ]
      ]
     }
    ],
    "LogoutURLs": [
     {
      "Fn::Join": [
       "",
       [
        "https://",
        {
         "Fn::GetAtt": [
          "cloudfrontcontrolplanePortalDistributionCAE911E8",
          "DomainName"
         ]
        }
       ]
      ]
     }
    ],
    "PreventUserExistenceErrors": "ENABLED",
    "SupportedIdentityProviders": [
     "COGNITO"
    ],
    "UserPoolId": {
     "Ref": "userPoolDC9497E0"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/clickstream-backend-client/Resource"
   }
  },
  "backenduser": {
   "Type": "AWS::Cognito::UserPoolUser",
   "Properties": {
    "UserAttributes": [
     {
      "Name": "email",
      "Value": {
       "Ref": "Email"
      }
     }
    ],
    "UserPoolId": {
     "Ref": "userPoolDC9497E0"
    },
    "Username": {
     "Ref": "Email"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/backend-user"
   }
  },
  "AuthorizerFunctionRoleDC80AC34": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-horizerFunctionRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AuthorizerFunctionRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "AuthorizerFunctionRoleDefaultPolicy21ECE726": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AuthorizerFunctionRoleDefaultPolicy21ECE726",
    "Roles": [
     {
      "Ref": "AuthorizerFunctionRoleDC80AC34"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AuthorizerFunctionRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "The lambda service writes to undetermined logs stream by design"
      }
     ]
    }
   }
  },
  "AuthorizerFunctionlog76BEC188": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupClass": "STANDARD",
    "RetentionInDays": 3653
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AuthorizerFunction-log/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "AuthorizerFunctionB4DBAA43": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/4aa9c517dcbfef58e27a1b795fadf297b58490b5c986f75b6854c6c5b03dc90a.zip"
    },
    "Environment": {
     "Variables": {
      "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
      "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
      "POWERTOOLS_LOGGER_LOG_EVENT": "true",
      "LOG_LEVEL": "WARN",
      "ISSUER": {
       "Fn::Join": [
        "",
        [
         "https://cognito-idp.",
         {
          "Ref": "AWS::Region"
         },
         ".amazonaws.com/",
         {
          "Ref": "userPoolDC9497E0"
         }
        ]
       ]
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "LoggingConfig": {
     "Fn::If": [
      "AWSCNCondition",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "LogFormat": "JSON",
       "ApplicationLogLevel": "WARN",
       "LogGroup": {
        "Ref": "AuthorizerFunctionlog76BEC188"
       }
      }
     ]
    },
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "AuthorizerFunctionRoleDC80AC34",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::If": [
      "AWSCNCondition",
      "nodejs18.x",
      "nodejs20.x"
     ]
    },
    "Timeout": 15
   },
   "DependsOn": [
    "AuthorizerFunctionRoleDefaultPolicy21ECE726",
    "AuthorizerFunctionRoleDC80AC34"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AuthorizerFunction/Resource",
    "aws:asset:path": "asset.4aa9c517dcbfef58e27a1b795fadf297b58490b5c986f75b6854c6c5b03dc90a",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by AuthorizerFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by AuthorizerFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "AuthorizerFunctioncloudfronts3controlplanestackglobalJWTAuthorizer35A98B82PermissionsFC2234F3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "AuthorizerFunctionB4DBAA43",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ClickStreamApi748490D9"
       },
       "/authorizers/",
       {
        "Ref": "JWTAuthorizerE8D8D90E"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AuthorizerFunction/cloudfronts3controlplanestackglobalJWTAuthorizer35A98B82:Permissions"
   }
  },
  "JWTAuthorizerE8D8D90E": {
   "Type": "AWS::ApiGateway::Authorizer",
   "Properties": {
    "AuthorizerResultTtlInSeconds": 0,
    "AuthorizerUri": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Fn::Select": [
         1,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "AuthorizerFunctionB4DBAA43",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ":apigateway:",
       {
        "Fn::Select": [
         3,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "AuthorizerFunctionB4DBAA43",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ":lambda:path/2015-03-31/functions/",
       {
        "Fn::GetAtt": [
         "AuthorizerFunctionB4DBAA43",
         "Arn"
        ]
       },
       "/invocations"
      ]
     ]
    },
    "IdentitySource": "method.request.header.Authorization",
    "IdentityValidationExpression": "^(Bearer )[a-zA-Z0-9-_]+?.[a-zA-Z0-9-_]+?.([a-zA-Z0-9-_]+)$",
    "Name": "cloudfronts3controlplanestackglobalJWTAuthorizer35A98B82",
    "RestApiId": {
     "Ref": "ClickStreamApi748490D9"
    },
    "Type": "TOKEN"
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/JWTAuthorizer/Resource"
   }
  },
  "ClickStreamApiClickstreamDictionaryFDA4AD32": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "name",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "name",
      "KeyType": "HASH"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickstreamDictionary/Resource"
   }
  },
  "ClickStreamApiClickstreamMetadataEC136DD8": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "type",
      "AttributeType": "S"
     },
     {
      "AttributeName": "prefix",
      "AttributeType": "S"
     },
     {
      "AttributeName": "createAt",
      "AttributeType": "N"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "prefix-time-index",
      "KeySchema": [
       {
        "AttributeName": "prefix",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "createAt",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "type",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickstreamMetadata/Resource"
   }
  },
  "ClickStreamApiAnalyticsMetadata4C5E5BA1": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "month",
      "AttributeType": "S"
     },
     {
      "AttributeName": "prefix",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "prefix-month-index",
      "KeySchema": [
       {
        "AttributeName": "prefix",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "month",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "month",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/AnalyticsMetadata/Resource"
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-tCustomResourceRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy51DD59EC": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiClickstreamDictionaryFDA4AD32",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy51DD59EC",
    "Roles": [
     {
      "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "The lambda service writes to undetermined logs stream by design"
      }
     ]
    }
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunctionlogFE6EA5E2": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupClass": "STANDARD",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceFunction-log/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/fbaf37aadb70702123c26b2e7b1a4d95e20f37d7bd980271bcf91e37464ce234.zip"
    },
    "Description": "Lambda function for dictionary init of solution Click Stream Analytics on AWS",
    "Environment": {
     "Variables": {
      "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
      "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
      "POWERTOOLS_LOGGER_LOG_EVENT": "true",
      "LOG_LEVEL": "WARN",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "LoggingConfig": {
     "Fn::If": [
      "AWSCNCondition",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "LogFormat": "JSON",
       "ApplicationLogLevel": "INFO",
       "LogGroup": {
        "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunctionlogFE6EA5E2"
       }
      }
     ]
    },
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::If": [
      "AWSCNCondition",
      "nodejs18.x",
      "nodejs20.x"
     ]
    },
    "Timeout": 30
   },
   "DependsOn": [
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy51DD59EC",
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceFunction/Resource",
    "aws:asset:path": "asset.fbaf37aadb70702123c26b2e7b1a4d95e20f37d7bd980271bcf91e37464ce234",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by DicInitCustomResourceFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by DicInitCustomResourceFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "--onEventServiceRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceProvider/framework-onEvent/ServiceRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy4B5DBE85": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy4B5DBE85",
    "Roles": [
     {
      "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventCEE52DB5": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc.zip"
    },
    "Description": "AWS CDK resource provider framework - onEvent (cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceProvider)",
    "Environment": {
     "Variables": {
      "USER_ON_EVENT_FUNCTION_ARN": {
       "Fn::GetAtt": [
        "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7",
        "Arn"
       ]
      },
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "framework.onEvent",
    "Role": {
     "Fn::GetAtt": [
      "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 900
   },
   "DependsOn": [
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy4B5DBE85",
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceProvider/framework-onEvent/Resource",
    "aws:asset:path": "asset.3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by CDK built-in provider for DicInitCustomResourceProvider for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by CDK built-in provider for DicInitCustomResourceProvider for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventLogRetention5C141DD0": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventCEE52DB5"
       }
      ]
     ]
    },
    "RetentionInDays": 5
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceProvider/framework-onEvent/LogRetention/Resource"
   }
  },
  "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceB9A4ABDE": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventCEE52DB5",
      "Arn"
     ]
    },
    "tableName": {
     "Ref": "ClickStreamApiClickstreamDictionaryFDA4AD32"
    },
    "lastModifiedTime": 1719537437164
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResource/Default"
   }
  },
  "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceBD22F9F9": {
   "Type": "Custom::AWS",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"DynamoDB\",\"action\":\"putItem\",\"physicalResourceId\":{\"id\":\"AddAdminUserCustomResource\"},\"parameters\":{\"TableName\":\"",
       {
        "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
       },
       "\",\"Item\":{\"id\":{\"S\":\"",
       {
        "Ref": "Email"
       },
       "\"},\"type\":{\"S\":\"USER\"},\"prefix\":{\"S\":\"USER\"},\"roles\":{\"L\":[{\"S\":\"Admin\"}]},\"createAt\":{\"N\":\"1719537767221\"},\"updateAt\":{\"N\":\"1719537767221\"},\"operator\":{\"S\":\"Clickstream\"},\"deleted\":{\"BOOL\":false}},\"ConditionExpression\":\"attribute_not_exists(id)\"},\"logApiResponseData\":true}"
      ]
     ]
    },
    "Update": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"DynamoDB\",\"action\":\"updateItem\",\"physicalResourceId\":{\"id\":\"AddAdminUserCustomResource\"},\"parameters\":{\"TableName\":\"",
       {
        "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
       },
       "\",\"Key\":{\"id\":{\"S\":\"",
       {
        "Ref": "Email"
       },
       "\"},\"type\":{\"S\":\"USER\"}},\"UpdateExpression\":\"SET #roles = :roles, #prefix = :prefix, #createAt = :createAt, #updateAt = :updateAt, #operator = :operator, #deleted = :deleted\",\"ExpressionAttributeNames\":{\"#roles\":\"roles\",\"#createAt\":\"createAt\",\"#updateAt\":\"updateAt\",\"#operator\":\"operator\",\"#deleted\":\"deleted\",\"#prefix\":\"prefix\"},\"ExpressionAttributeValues\":{\":prefix\":{\"S\":\"USER\"},\":roles\":{\"L\":[{\"S\":\"Admin\"}]},\":createAt\":{\"N\":\"1719537767221\"},\":updateAt\":{\"N\":\"1719537767221\"},\":operator\":{\"S\":\"Clickstream\"},\":deleted\":{\"BOOL\":false}}},\"logApiResponseData\":true}"
      ]
     ]
    },
    "Delete": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"DynamoDB\",\"action\":\"deleteItem\",\"physicalResourceId\":{\"id\":\"AddAdminUserCustomResource\"},\"parameters\":{\"TableName\":\"",
       {
        "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
       },
       "\",\"Key\":{\"id\":{\"S\":\"",
       {
        "Ref": "Email"
       },
       "\"},\"type\":{\"S\":\"USER\"}},\"ConditionExpression\":\"attribute_exists(id)\"},\"logApiResponseData\":true}"
      ]
     ]
    },
    "InstallLatestAwsSdk": false
   },
   "DependsOn": [
    "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceCustomResourcePolicyB7F90F13"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/AddAdminUserCustomResource/AddAdminUserAwsCustomResource/Resource/Default"
   }
  },
  "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceCustomResourcePolicyB7F90F13": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiClickstreamMetadataEC136DD8",
         "Arn"
        ]
       },
       "Sid": "DynamoWriteAccess"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceCustomResourcePolicyB7F90F13",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/AddAdminUserCustomResource/AddAdminUserAwsCustomResource/CustomResourcePolicy/Resource"
   }
  },
  "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-ActionFunctionRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/ActionFunctionRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackActionStateMachineActionFunctionRoleDefaultPolicy602A4F26": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "cloudformation:CreateStack",
        "cloudformation:UpdateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStacks",
        "cloudformation:UpdateTerminationProtection",
        "cloudformation:ContinueUpdateRollback",
        "cloudformation:RollbackStack"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":cloudformation:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":stack/",
          {
           "Fn::If": [
            "IsEmptyRolePrefixCondition",
            "Clickstream",
            {
             "Fn::Join": [
              "",
              [
               {
                "Ref": "IamRolePrefix"
               },
               "-Clickstream"
              ]
             ]
            }
           ]
          },
          "*"
         ]
        ]
       }
      },
      {
       "Action": [
        "iam:GetRole",
        "iam:PassRole",
        "iam:DetachRolePolicy",
        "iam:GetPolicy",
        "iam:DeleteRolePolicy",
        "iam:CreateRole",
        "iam:DeleteRole",
        "iam:AttachRolePolicy",
        "iam:PutRolePolicy",
        "iam:ListRolePolicies",
        "iam:GetRolePolicy",
        "iam:CreateInstanceProfile",
        "iam:DeleteInstanceProfile",
        "iam:RemoveRoleFromInstanceProfile",
        "iam:AddRoleToInstanceProfile",
        "iam:ListPolicies",
        "iam:ListRoles",
        "iam:UpdateRoleDescription",
        "iam:TagRole",
        "iam:UntagRole",
        "iam:ListRoleTags"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/",
           {
            "Fn::If": [
             "IsEmptyRolePrefixCondition",
             "Clickstream",
             {
              "Ref": "IamRolePrefix"
             }
            ]
           },
           "*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":policy/",
           {
            "Fn::If": [
             "IsEmptyRolePrefixCondition",
             "Clickstream",
             {
              "Ref": "IamRolePrefix"
             }
            ]
           },
           "*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":instance-profile/",
           {
            "Fn::If": [
             "IsEmptyRolePrefixCondition",
             "Clickstream",
             {
              "Ref": "IamRolePrefix"
             }
            ]
           },
           "*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "iam:PassRole",
        "iam:CreateServiceLinkedRole"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/aws-service-role/globalaccelerator.amazonaws.com/AWSServiceRoleForGlobalAccelerator"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "resource-groups:GetGroup",
        "resource-groups:DisassociateResource"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":resource-groups:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":group/AWS_AppRegistry_Application-clickstream-analytics-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "sns:*",
        "sqs:*",
        "redshift-serverless:*",
        "s3:*",
        "apigateway:*",
        "logs:*",
        "redshift:*",
        "dynamodb:*",
        "autoscaling:*",
        "application-autoscaling:*",
        "glue:*",
        "cloudwatch:*",
        "emr-serverless:*",
        "ssm:*",
        "ecs:*",
        "lambda:*",
        "quicksight:*",
        "ec2:*",
        "events:*",
        "elasticloadbalancing:*",
        "kinesis:*",
        "kafka:*",
        "states:*",
        "secretsmanager:*",
        "globalaccelerator:*",
        "kms:*",
        "athena:*",
        "servicecatalog:CreateApplication",
        "servicecatalog:UpdateApplication",
        "servicecatalog:DeleteApplication",
        "servicecatalog:GetApplication",
        "servicecatalog:GetAssociatedResource",
        "servicecatalog:AssociateResource",
        "servicecatalog:DisassociateResource",
        "servicecatalog:TagResource",
        "servicecatalog:UntagResource",
        "tag:GetResources",
        "tag:UntagResources"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiStackActionStateMachineActionFunctionRoleDefaultPolicy602A4F26",
    "Roles": [
     {
      "Ref": "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/ActionFunctionRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W76",
       "reason": "Policy is generated by DefaultPolicy which resources SPCM for IAM policy document is higher than 25"
      },
      {
       "id": "F4",
       "reason": "Policy is generated by ActionFunctionRole, this policy requires related actions in order to start/delete/update cloudformation stacks with many other services"
      },
      {
       "id": "W12",
       "reason": "Policy is generated by DefaultPolicy, * states resources for read only access or IAM limitation."
      }
     ]
    }
   }
  },
  "ClickStreamApiStackActionStateMachineActionFunctionlogBB41565F": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupClass": "STANDARD",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/ActionFunction-log/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApiStackActionStateMachineActionFunction8314F7B4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/461ba54cfceaf33735bef75cdf3c7de40598acae7c3c8443300ec4e701348d4e.zip"
    },
    "Description": "Lambda function for state machine action of solution Clickstream Analytics on AWS",
    "Environment": {
     "Variables": {
      "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
      "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
      "POWERTOOLS_LOGGER_LOG_EVENT": "true",
      "LOG_LEVEL": "WARN",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "LoggingConfig": {
     "Fn::If": [
      "AWSCNCondition",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "LogFormat": "JSON",
       "ApplicationLogLevel": "INFO",
       "LogGroup": {
        "Ref": "ClickStreamApiStackActionStateMachineActionFunctionlogBB41565F"
       }
      }
     ]
    },
    "Role": {
     "Fn::GetAtt": [
      "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::If": [
      "AWSCNCondition",
      "nodejs18.x",
      "nodejs20.x"
     ]
    },
    "Timeout": 15,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "ClickStreamApiStackActionStateMachineActionFunctionRoleDefaultPolicy602A4F26",
    "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/ActionFunction/Resource",
    "aws:asset:path": "asset.461ba54cfceaf33735bef75cdf3c7de40598acae7c3c8443300ec4e701348d4e",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by ActionFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by ActionFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackActionStateMachineLogGroupEB2C2181": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/vendedlogs/states/Clickstream/StackActionLogGroup-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "RetentionInDays": 180
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/LogGroup/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApiStackActionStateMachineRole732FABDC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::FindInMap": [
          "ServiceprincipalMap",
          {
           "Ref": "AWS::Region"
          },
          "states"
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-ionStateMachineRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/StackActionStateMachine/Role/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackActionStateMachineRoleDefaultPolicyA311B7F8": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogDelivery",
        "logs:GetLogDelivery",
        "logs:UpdateLogDelivery",
        "logs:DeleteLogDelivery",
        "logs:ListLogDeliveries",
        "logs:PutResourcePolicy",
        "logs:DescribeResourcePolicies",
        "logs:DescribeLogGroups"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords",
        "xray:GetSamplingRules",
        "xray:GetSamplingTargets"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiStackActionStateMachineRoleDefaultPolicyA311B7F8",
    "Roles": [
     {
      "Ref": "ClickStreamApiStackActionStateMachineRole732FABDC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/StackActionStateMachine/Role/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Policy is generated by DefaultPolicy, * states resources for read only access or IAM limitation."
      }
     ]
    }
   }
  },
  "ClickStreamApiStackActionStateMachine21A0158C": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"Execute Task\",\"States\":{\"Execute Task\":{\"Next\":\"End?\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}},\"End?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Action\",\"StringEquals\":\"End\",\"Next\":\"EndState\"}],\"Default\":\"Wait 30 Seconds\"},\"Wait 30 Seconds\":{\"Type\":\"Wait\",\"Seconds\":30,\"Next\":\"Describe Stack\"},\"Stack in progress?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Result.StackStatus\",\"StringMatches\":\"*_IN_PROGRESS\",\"Next\":\"Wait 30 Seconds\"}],\"Default\":\"Callback Task\"},\"Describe Stack\":{\"Next\":\"Stack in progress?\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}},\"Callback Task\":{\"Next\":\"EndState\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}},\"EndState\":{\"Type\":\"Pass\",\"End\":true}},\"TimeoutSeconds\":7200}"
      ]
     ]
    },
    "LoggingConfiguration": {
     "Destinations": [
      {
       "CloudWatchLogsLogGroup": {
        "LogGroupArn": {
         "Fn::GetAtt": [
          "ClickStreamApiStackActionStateMachineLogGroupEB2C2181",
          "Arn"
         ]
        }
       }
      }
     ],
     "Level": "ALL"
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "ClickStreamApiStackActionStateMachineRole732FABDC",
      "Arn"
     ]
    },
    "TracingConfiguration": {
     "Enabled": true
    }
   },
   "DependsOn": [
    "ClickStreamApiStackActionStateMachineRoleDefaultPolicyA311B7F8",
    "ClickStreamApiStackActionStateMachineRole732FABDC"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackActionStateMachine/StackActionStateMachine/Resource"
   }
  },
  "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-orkflowFunctionRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/WorkflowFunctionRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicyD3A5F5BE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "cloudformation:DescribeStacks",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":cloudformation:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":stack/",
          {
           "Fn::If": [
            "IsEmptyRolePrefixCondition",
            "Clickstream",
            {
             "Fn::Join": [
              "",
              [
               {
                "Ref": "IamRolePrefix"
               },
               "-Clickstream"
              ]
             ]
            }
           ]
          },
          "*"
         ]
        ]
       }
      },
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickstreamSolutionDataBucket200465FE",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickstreamSolutionDataBucket200465FE",
             "Arn"
            ]
           },
           "/clickstream/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicyD3A5F5BE",
    "Roles": [
     {
      "Ref": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/WorkflowFunctionRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "The lambda service writes to undetermined logs stream by design"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionlogF22A888E": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupClass": "STANDARD",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/WorkflowFunction-log/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/145c7ea6838573177f53a42b1ba4b8f64000b664376766638486ac42e43c17e0.zip"
    },
    "Description": "Lambda function for state machine workflow of solution Clickstream Analytics on AWS",
    "Environment": {
     "Variables": {
      "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
      "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
      "POWERTOOLS_LOGGER_LOG_EVENT": "true",
      "LOG_LEVEL": "WARN",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "LoggingConfig": {
     "Fn::If": [
      "AWSCNCondition",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "LogFormat": "JSON",
       "ApplicationLogLevel": "INFO",
       "LogGroup": {
        "Ref": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionlogF22A888E"
       }
      }
     ]
    },
    "Role": {
     "Fn::GetAtt": [
      "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::If": [
      "AWSCNCondition",
      "nodejs18.x",
      "nodejs20.x"
     ]
    },
    "Timeout": 15,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicyD3A5F5BE",
    "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/WorkflowFunction/Resource",
    "aws:asset:path": "asset.145c7ea6838573177f53a42b1ba4b8f64000b664376766638486ac42e43c17e0",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by portal_fn for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by portal_fn for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackWorkflowStateMachineLogGroup5A682818": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/vendedlogs/states/Clickstream/StackWorkflowLogGroup-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "RetentionInDays": 180
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/LogGroup/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::FindInMap": [
          "ServiceprincipalMap",
          {
           "Ref": "AWS::Region"
          },
          "states"
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-lowStateMachineRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/StackWorkflowStateMachine/Role/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackWorkflowStateMachineRoleDefaultPolicyDCD707BA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
       }
      },
      {
       "Action": [
        "states:DescribeExecution",
        "states:StopExecution"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":states:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":execution:",
          {
           "Fn::Select": [
            6,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
              }
             ]
            }
           ]
          },
          "*"
         ]
        ]
       }
      },
      {
       "Action": [
        "events:PutTargets",
        "events:PutRule",
        "events:DescribeRule"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":events:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
         ]
        ]
       }
      },
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":states:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":stateMachine:clickstream-stack-workflow-",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "-",
              {
               "Fn::Select": [
                2,
                {
                 "Fn::Split": [
                  "/",
                  {
                   "Ref": "AWS::StackId"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "states:DescribeExecution",
        "states:StopExecution"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":states:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":execution:clickstream-stack-workflow-",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "-",
              {
               "Fn::Select": [
                2,
                {
                 "Fn::Split": [
                  "/",
                  {
                   "Ref": "AWS::StackId"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "*"
         ]
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogDelivery",
        "logs:GetLogDelivery",
        "logs:UpdateLogDelivery",
        "logs:DeleteLogDelivery",
        "logs:ListLogDeliveries",
        "logs:PutResourcePolicy",
        "logs:DescribeResourcePolicies",
        "logs:DescribeLogGroups"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords",
        "xray:GetSamplingRules",
        "xray:GetSamplingTargets"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiStackWorkflowStateMachineRoleDefaultPolicyDCD707BA",
    "Roles": [
     {
      "Ref": "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/StackWorkflowStateMachine/Role/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Policy is generated by DefaultPolicy, * states resources for read only access or IAM limitation."
      },
      {
       "id": "W76",
       "reason": "Policy is generated by DefaultPolicy which resources SPCM for IAM policy document is higher than 25"
      }
     ]
    }
   }
  },
  "ClickStreamApiStackWorkflowStateMachineC5F60F13": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"InputTask\",\"States\":{\"InputTask\":{\"Next\":\"TypeChoice\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}},\"TypeChoice\":{\"Type\":\"Choice\",\"OutputPath\":\"$.Data\",\"Choices\":[{\"Variable\":\"$.Type\",\"StringEquals\":\"Stack\",\"Next\":\"StackExecution\"},{\"Variable\":\"$.Type\",\"StringEquals\":\"Serial\",\"Next\":\"SerialMap\"},{\"Variable\":\"$.Type\",\"StringEquals\":\"Parallel\",\"Next\":\"ParallelMap\"}],\"Default\":\"Pass\"},\"Pass\":{\"Type\":\"Pass\",\"End\":true},\"StackExecution\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Action.$\":\"$.Input.Action\",\"Token.$\":\"$$.Task.Token\",\"Input.$\":\"$.Input\",\"Callback.$\":\"$.Callback\"},\"StateMachineArn\":\"",
       {
        "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
       },
       "\"}},\"SerialMap\":{\"Type\":\"Map\",\"End\":true,\"ItemsPath\":\"$\",\"ItemProcessor\":{\"ProcessorConfig\":{\"Mode\":\"INLINE\"},\"StartAt\":\"SerialCallSelf\",\"States\":{\"SerialCallSelf\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Token.$\":\"$$.Task.Token\",\"MapRun\":true,\"Data.$\":\"$\"},\"StateMachineArn\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":stateMachine:clickstream-stack-workflow-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       },
       "\"}}}},\"MaxConcurrency\":1},\"ParallelMap\":{\"Type\":\"Map\",\"End\":true,\"ItemsPath\":\"$\",\"ItemProcessor\":{\"ProcessorConfig\":{\"Mode\":\"INLINE\"},\"StartAt\":\"ParallelCallSelf\",\"States\":{\"ParallelCallSelf\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Token.$\":\"$$.Task.Token\",\"MapRun\":true,\"Data.$\":\"$\"},\"StateMachineArn\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":stateMachine:clickstream-stack-workflow-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       },
       "\"}}}},\"MaxConcurrency\":40}},\"TimeoutSeconds\":259200}"
      ]
     ]
    },
    "LoggingConfiguration": {
     "Destinations": [
      {
       "CloudWatchLogsLogGroup": {
        "LogGroupArn": {
         "Fn::GetAtt": [
          "ClickStreamApiStackWorkflowStateMachineLogGroup5A682818",
          "Arn"
         ]
        }
       }
      }
     ],
     "Level": "ALL"
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958",
      "Arn"
     ]
    },
    "StateMachineName": {
     "Fn::Join": [
      "",
      [
       "clickstream-stack-workflow-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "TracingConfiguration": {
     "Enabled": true
    }
   },
   "DependsOn": [
    "ClickStreamApiStackWorkflowStateMachineRoleDefaultPolicyDCD707BA",
    "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/StackWorkflowStateMachine/StackWorkflowStateMachine/Resource"
   }
  },
  "ClickStreamApiBackendEventBusListenStateFuncRoleC2399C89": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-ListenStateFuncRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStateFuncRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStateFuncRoleDefaultPolicyE8ABDA32": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "cloudformation:DescribeStacks",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":cloudformation:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":stack/",
          {
           "Fn::If": [
            "IsEmptyRolePrefixCondition",
            "Clickstream",
            {
             "Fn::Join": [
              "",
              [
               {
                "Ref": "IamRolePrefix"
               },
               "-Clickstream"
              ]
             ]
            }
           ]
          },
          "*"
         ]
        ]
       }
      },
      {
       "Action": [
        "events:DeleteRule",
        "events:ListTargetsByRule",
        "events:RemoveTargets"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":events:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":rule/ClickstreamRuleForCFN*"
         ]
        ]
       }
      },
      {
       "Action": [
        "sns:ListSubscriptionsByTopic",
        "sns:DeleteTopic",
        "sns:Unsubscribe"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":sns:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":ClickstreamTopicForCFN*"
         ]
        ]
       }
      },
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiClickstreamMetadataEC136DD8",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickStreamApiClickstreamMetadataEC136DD8",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiBackendEventBusListenStateFuncRoleDefaultPolicyE8ABDA32",
    "Roles": [
     {
      "Ref": "ClickStreamApiBackendEventBusListenStateFuncRoleC2399C89"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStateFuncRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "The lambda service creates undetermined eni by design"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStateFunctionlogC56C857A": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupClass": "STANDARD",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStateFunction-log/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStateFunctionE05DD00F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/368227bafd015d0389b42bc7ff7fd123f60f5a039b9670b8c7148d0f5b7b57fe.zip"
    },
    "Description": "Lambda function for listen SFN state machine status of solution Clickstream Analytics on AWS",
    "Environment": {
     "Variables": {
      "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
      "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
      "POWERTOOLS_LOGGER_LOG_EVENT": "true",
      "LOG_LEVEL": "WARN",
      "CLICKSTREAM_TABLE_NAME": {
       "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
      },
      "PREFIX_TIME_GSI_NAME": "prefix-time-index",
      "AWS_ACCOUNT_ID": {
       "Ref": "AWS::AccountId"
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "LoggingConfig": {
     "Fn::If": [
      "AWSCNCondition",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "LogFormat": "JSON",
       "ApplicationLogLevel": "INFO",
       "LogGroup": {
        "Ref": "ClickStreamApiBackendEventBusListenStateFunctionlogC56C857A"
       }
      }
     ]
    },
    "Role": {
     "Fn::GetAtt": [
      "ClickStreamApiBackendEventBusListenStateFuncRoleC2399C89",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::If": [
      "AWSCNCondition",
      "nodejs18.x",
      "nodejs20.x"
     ]
    },
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "ClickStreamApiBackendEventBusListenStateFuncRoleDefaultPolicyE8ABDA32",
    "ClickStreamApiBackendEventBusListenStateFuncRoleC2399C89"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStateFunction/Resource",
    "aws:asset:path": "asset.368227bafd015d0389b42bc7ff7fd123f60f5a039b9670b8c7148d0f5b7b57fe",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by ListenStateFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by ListenStateFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStateStatusChange3F69E34F": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Rule for listen SFN state machine status change",
    "EventPattern": {
     "source": [
      "aws.states"
     ],
     "detail-type": [
      "Step Functions Execution Status Change"
     ],
     "detail": {
      "stateMachineArn": [
       {
        "Ref": "ClickStreamApiStackWorkflowStateMachineC5F60F13"
       }
      ]
     },
     "resources": [
      {
       "wildcard": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":states:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":execution:",
          {
           "Fn::GetAtt": [
            "ClickStreamApiStackWorkflowStateMachineC5F60F13",
            "Name"
           ]
          },
          ":main*"
         ]
        ]
       }
      }
     ]
    },
    "Name": {
     "Fn::Join": [
      "",
      [
       "ClickstreamListenStateStatusChange-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "ClickStreamApiBackendEventBusListenStateFunctionE05DD00F",
        "Arn"
       ]
      },
      "DeadLetterConfig": {
       "Arn": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBuslistenStateStatusDLQ09CDAFD4",
         "Arn"
        ]
       }
      },
      "Id": "Target0",
      "RetryPolicy": {
       "MaximumEventAgeInSeconds": 7200,
       "MaximumRetryAttempts": 2
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStateStatusChange/Resource"
   }
  },
  "ClickStreamApiBackendEventBusListenStateStatusChangeAllowEventRulecloudfronts3controlplanestackglobalClickStreamApiBackendEventBusListenStateFunctionE55F443AF77E8943": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ClickStreamApiBackendEventBusListenStateFunctionE05DD00F",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ClickStreamApiBackendEventBusListenStateStatusChange3F69E34F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStateStatusChange/AllowEventRulecloudfronts3controlplanestackglobalClickStreamApiBackendEventBusListenStateFunctionE55F443A"
   }
  },
  "ClickStreamApiBackendEventBuslistenStateStatusDLQ09CDAFD4": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "SqsManagedSseEnabled": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/listenStateStatusDLQ/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W48",
       "reason": "SQS already set SQS_MANAGED encryption"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBuslistenStateStatusDLQPolicy59231A44": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBuslistenStateStatusDLQ09CDAFD4",
         "Arn"
        ]
       }
      },
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "ClickStreamApiBackendEventBusListenStateStatusChange3F69E34F",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBuslistenStateStatusDLQ09CDAFD4",
         "Arn"
        ]
       },
       "Sid": "AllowEventRulecloudfronts3controlplanestackglobalClickStreamApiBackendEventBusListenStateStatusChangeFB7A15E9"
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "ClickStreamApiBackendEventBuslistenStateStatusDLQ09CDAFD4"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/listenStateStatusDLQ/Policy/Resource"
   }
  },
  "ClickStreamApiBackendEventBuslistenStackStatusDLQ94095580": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "SqsManagedSseEnabled": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/listenStackStatusDLQ/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W48",
       "reason": "SQS already set SQS_MANAGED encryption"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBuslistenStackStatusDLQPolicy649D7DD8": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBuslistenStackStatusDLQ94095580",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "ClickStreamApiBackendEventBuslistenStackStatusDLQ94095580"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/listenStackStatusDLQ/Policy/Resource"
   }
  },
  "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "QueueName": {
     "Fn::Join": [
      "",
      [
       "ClickstreamListenStackStatusChange-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "ClickStreamApiBackendEventBuslistenStackStatusDLQ94095580",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "SqsManagedSseEnabled": true,
    "VisibilityTimeout": 60
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStackStatusQueue/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W48",
       "reason": "SQS already set SQS_MANAGED encryption"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStackStatusQueuePolicyA6D442FF": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84",
         "Arn"
        ]
       }
      },
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":sns:*:",
            {
             "Ref": "AWS::AccountId"
            },
            ":Clickstream*"
           ]
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStackStatusQueue/Policy/Resource"
   }
  },
  "ClickStreamApiBackendEventBusListenStackFuncRole2C62A27A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-ListenStackFuncRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStackFuncRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStackFuncRoleDefaultPolicy2E63F180": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "cloudformation:DescribeStacks",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":cloudformation:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":stack/",
          {
           "Fn::If": [
            "IsEmptyRolePrefixCondition",
            "Clickstream",
            {
             "Fn::Join": [
              "",
              [
               {
                "Ref": "IamRolePrefix"
               },
               "-Clickstream"
              ]
             ]
            }
           ]
          },
          "*"
         ]
        ]
       }
      },
      {
       "Action": [
        "sqs:DeleteMessage",
        "sqs:ReceiveMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiClickstreamMetadataEC136DD8",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickStreamApiClickstreamMetadataEC136DD8",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "sqs:ReceiveMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:GetQueueUrl",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiBackendEventBusListenStackFuncRoleDefaultPolicy2E63F180",
    "Roles": [
     {
      "Ref": "ClickStreamApiBackendEventBusListenStackFuncRole2C62A27A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStackFuncRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "The lambda service creates undetermined eni by design"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStackFunctionlog2633A0EB": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupClass": "STANDARD",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStackFunction-log/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStackFunction2C052556": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/3ab45057a5bbd79bde48ee1891b47f68e4569d338dbc279dc074aa5079e2cf30.zip"
    },
    "Description": "Lambda function for listen CFN stack status of solution Clickstream Analytics on AWS",
    "Environment": {
     "Variables": {
      "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
      "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
      "POWERTOOLS_LOGGER_LOG_EVENT": "true",
      "LOG_LEVEL": "WARN",
      "CLICKSTREAM_TABLE_NAME": {
       "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
      },
      "PREFIX_TIME_GSI_NAME": "prefix-time-index",
      "IAM_ROLE_PREFIX": {
       "Ref": "IamRolePrefix"
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "LoggingConfig": {
     "Fn::If": [
      "AWSCNCondition",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "LogFormat": "JSON",
       "ApplicationLogLevel": "INFO",
       "LogGroup": {
        "Ref": "ClickStreamApiBackendEventBusListenStackFunctionlog2633A0EB"
       }
      }
     ]
    },
    "Role": {
     "Fn::GetAtt": [
      "ClickStreamApiBackendEventBusListenStackFuncRole2C62A27A",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::If": [
      "AWSCNCondition",
      "nodejs18.x",
      "nodejs20.x"
     ]
    },
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "ClickStreamApiBackendEventBusListenStackFuncRoleDefaultPolicy2E63F180",
    "ClickStreamApiBackendEventBusListenStackFuncRole2C62A27A"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStackFunction/Resource",
    "aws:asset:path": "asset.3ab45057a5bbd79bde48ee1891b47f68e4569d338dbc279dc074aa5079e2cf30",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by ListenStackFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by ListenStackFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "ClickStreamApiBackendEventBusListenStackFunctionSqsEventSourcecloudfronts3controlplanestackglobalClickStreamApiBackendEventBusListenStackStatusQueueA5B2B65499586CBE": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 1,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "ClickStreamApiBackendEventBusListenStackFunction2C052556"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/BackendEventBus/ListenStackFunction/SqsEventSource:cloudfronts3controlplanestackglobalClickStreamApiBackendEventBusListenStackStatusQueueA5B2B654/Resource"
   }
  },
  "ClickStreamApiApiFunctionRole378A2758": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-ApiFunctionRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ApiFunctionRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiApiFunctionRoleDefaultPolicy7987A2B3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:CreateLogGroup"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": [
        {
         "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
        },
        {
         "Ref": "ClickStreamApiStackWorkflowStateMachineC5F60F13"
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":states:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":stateMachine:ScanMetadataWorkflow*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":states:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":stateMachine:ClickstreamUserSegmentsWorkflowStateMachine*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "ec2:DescribeRegions",
        "ec2:DescribeVpcs",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeRouteTables",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeSecurityGroupRules",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeNatGateways",
        "kafka:ListClustersV2",
        "kafka:ListClusters",
        "kafka:ListNodes",
        "s3:ListAllMyBuckets",
        "redshift:DescribeClusters",
        "redshift:DescribeClusterSubnetGroups",
        "redshift-serverless:ListWorkgroups",
        "redshift-serverless:GetWorkgroup",
        "redshift-serverless:GetNamespace",
        "redshift-data:BatchExecuteStatement",
        "s3:ListBucket",
        "s3:GetObject",
        "s3:PutObject",
        "ds:AuthorizeApplication",
        "ds:UnauthorizeApplication",
        "ds:CheckAlias",
        "ds:CreateAlias",
        "ds:DescribeDirectories",
        "ds:DescribeTrusts",
        "ds:DeleteDirectory",
        "ds:CreateIdentityPoolDirectory",
        "s3:GetBucketLocation",
        "s3:GetBucketPolicy",
        "route53:ListHostedZones",
        "iam:ListRoles",
        "iam:ListServerCertificates",
        "iam:GetContextKeysForCustomPolicy",
        "iam:SimulateCustomPolicy",
        "states:DescribeExecution",
        "states:ListExecutions",
        "acm:ListCertificates",
        "cloudformation:DescribeStacks",
        "cloudformation:DescribeType",
        "secretsmanager:ListSecrets",
        "secretsmanager:GetSecretValue",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:EnableAlarmActions",
        "cloudwatch:DisableAlarmActions",
        "events:PutRule",
        "events:ListTargetsByRule",
        "events:PutTargets",
        "events:TagResource",
        "events:UntagResource",
        "sns:CreateTopic",
        "sns:Subscribe",
        "sns:SetTopicAttributes",
        "sns:TagResource",
        "sns:UntagResource"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "quicksight:UpdateDashboardPermissions",
        "quicksight:CreateDataSet",
        "quicksight:DeleteDataSet",
        "quicksight:PassDataSet",
        "quicksight:PassDataSource",
        "quicksight:CreateDashboard",
        "quicksight:DeleteDashboard",
        "quicksight:UpdateDashboard",
        "quicksight:DescribeDashboard",
        "quicksight:UpdateDashboardPublishedVersion",
        "quicksight:CreateAnalysis",
        "quicksight:UpdateAnalysis",
        "quicksight:DeleteAnalysis",
        "quicksight:CreateFolderMembership",
        "quicksight:ListFolderMembers",
        "quicksight:DescribeFolder",
        "quicksight:CreateFolder"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":analysis/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":dashboard/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":dataset/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":datasource/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":folder/clickstream*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "quicksight:GenerateEmbedUrlForRegisteredUser",
        "quicksight:RegisterUser",
        "quicksight:DeleteUser",
        "quicksight:ListUsers",
        "quicksight:ListDataSets",
        "quicksight:ListDashboards",
        "quicksight:ListAnalyses"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":analysis/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":dashboard/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":dataset/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":quicksight:*:",
           {
            "Ref": "AWS::AccountId"
           },
           ":user/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "quicksight:DescribeAccountSubscription",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":quicksight:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":*"
         ]
        ]
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":iam::",
          {
           "Ref": "AWS::AccountId"
          },
          ":role/",
          {
           "Fn::If": [
            "IsEmptyRolePrefixCondition",
            "Clickstream",
            {
             "Ref": "IamRolePrefix"
            }
           ]
          },
          "*"
         ]
        ]
       }
      },
      {
       "Action": [
        "events:RemoveTargets",
        "events:DeleteRule"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":events:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":rule/Clickstream-SegmentJobRule-*"
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ClickStreamApiApiFunctionRole378A2758",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiClickstreamDictionaryFDA4AD32",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiClickstreamMetadataEC136DD8",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickStreamApiClickstreamMetadataEC136DD8",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ClickStreamApiAnalyticsMetadata4C5E5BA1",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ClickStreamApiAnalyticsMetadata4C5E5BA1",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiApiFunctionRoleDefaultPolicy7987A2B3",
    "Roles": [
     {
      "Ref": "ClickStreamApiApiFunctionRole378A2758"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ApiFunctionRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W76",
       "reason": "Policy is generated by ApiFunctionRoleDefaultPolicy which resources SPCM for IAM policy document is higher than 25"
      },
      {
       "id": "W12",
       "reason": "Policy is generated by ApiFunctionRoleDefaultPolicy, * lambda resources for read only access or IAM limitation."
      }
     ]
    }
   }
  },
  "ClickStreamApiUploadRole7BE99918": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "ClickStreamApiApiFunctionRole378A2758",
          "Arn"
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-UploadRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/UploadRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiUploadRoleDefaultPolicyE2E4FB33": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "ClickstreamSolutionDataBucket200465FE",
            "Arn"
           ]
          },
          "/plugins/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClickStreamApiUploadRoleDefaultPolicyE2E4FB33",
    "Roles": [
     {
      "Ref": "ClickStreamApiUploadRole7BE99918"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/UploadRole/DefaultPolicy/Resource"
   }
  },
  "ClickStreamApiLambdaAdapterLayer4456E47F": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "nodejs16.x",
     "nodejs18.x",
     "nodejs20.x",
     "nodejs18.x"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/172d69d35a126d7901ad2947a219793f8764b0b56702c2b0c860a28b5ceb021f.zip"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/LambdaAdapterLayer/Resource",
    "aws:asset:path": "asset.172d69d35a126d7901ad2947a219793f8764b0b56702c2b0c860a28b5ceb021f",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "ClickStreamApiQuickSightEmbedRole56794DF9": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "quicksight:GenerateEmbedUrlForRegisteredUser",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":quicksight:*:",
             {
              "Ref": "AWS::AccountId"
             },
             ":dashboard/clickstream*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":quicksight:*:",
             {
              "Ref": "AWS::AccountId"
             },
             ":user/*"
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "quickSightEmbedPolicy"
     }
    ],
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-QuickSightEmbedRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/QuickSightEmbedRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiApiFunction684A4D61": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/04abff34c3f9b992e2c21b05752509100460ee035e04cbe4631fde33cb42ac63.zip"
    },
    "Description": "Lambda function for api of solution Clickstream Analytics on AWS",
    "Environment": {
     "Variables": {
      "AWS_LAMBDA_EXEC_WRAPPER": "/opt/bootstrap",
      "CLICK_STREAM_TABLE_NAME": {
       "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
      },
      "DICTIONARY_TABLE_NAME": {
       "Ref": "ClickStreamApiClickstreamDictionaryFDA4AD32"
      },
      "ANALYTICS_METADATA_TABLE_NAME": {
       "Ref": "ClickStreamApiAnalyticsMetadata4C5E5BA1"
      },
      "STACK_ACTION_STATE_MACHINE": {
       "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
      },
      "STACK_WORKFLOW_STATE_MACHINE": {
       "Ref": "ClickStreamApiStackWorkflowStateMachineC5F60F13"
      },
      "STACK_WORKFLOW_S3_BUCKET": {
       "Ref": "ClickstreamSolutionDataBucket200465FE"
      },
      "PREFIX_TIME_GSI_NAME": "prefix-time-index",
      "PREFIX_MONTH_GSI_NAME": "prefix-month-index",
      "AWS_ACCOUNT_ID": {
       "Ref": "AWS::AccountId"
      },
      "AWS_PARTITION": {
       "Ref": "AWS::Partition"
      },
      "AWS_URL_SUFFIX": {
       "Ref": "AWS::URLSuffix"
      },
      "WITH_AUTH_MIDDLEWARE": "false",
      "ISSUER": "",
      "STS_UPLOAD_ROLE_ARN": {
       "Fn::GetAtt": [
        "ClickStreamApiUploadRole7BE99918",
        "Arn"
       ]
      },
      "QUICKSIGHT_EMBED_ROLE_ARN": {
       "Fn::GetAtt": [
        "ClickStreamApiQuickSightEmbedRole56794DF9",
        "Arn"
       ]
      },
      "HEALTH_CHECK_PATH": "/",
      "WITH_VALIDATE_ROLE": "true",
      "FULL_SOLUTION_VERSION": "v1.1.6-202406280046",
      "LISTEN_STACK_QUEUE_ARN": {
       "Fn::GetAtt": [
        "ClickStreamApiBackendEventBusListenStackStatusQueueA9825F84",
        "Arn"
       ]
      },
      "IAM_ROLE_PREFIX": {
       "Ref": "IamRolePrefix"
      },
      "IAM_ROLE_BOUNDARY_ARN": {
       "Ref": "IamRoleBoundaryArn"
      },
      "API_FUNCTION_LAMBDA_ROLE": {
       "Fn::GetAtt": [
        "ClickStreamApiApiFunctionRole378A2758",
        "Arn"
       ]
      },
      "TEMPLATE_FILE": "cloudfront-s3-control-plane-stack-global.template.json",
      "STACK_ID": {
       "Ref": "AWS::StackId"
      },
      "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
      "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
      "POWERTOOLS_LOGGER_LOG_EVENT": "true",
      "LOG_LEVEL": "WARN",
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "run.sh",
    "Layers": [
     {
      "Ref": "ClickStreamApiLambdaAdapterLayer4456E47F"
     }
    ],
    "LoggingConfig": {
     "Fn::If": [
      "AWSCNCondition",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "LogFormat": "JSON",
       "ApplicationLogLevel": "WARN"
      }
     ]
    },
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "ClickStreamApiApiFunctionRole378A2758",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::If": [
      "AWSCNCondition",
      "nodejs18.x",
      "nodejs20.x"
     ]
    },
    "Timeout": 30
   },
   "DependsOn": [
    "ClickStreamApiApiFunctionRoleDefaultPolicy7987A2B3",
    "ClickStreamApiApiFunctionRole378A2758"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ApiFunction/Resource",
    "aws:asset:path": "asset.04abff34c3f9b992e2c21b05752509100460ee035e04cbe4631fde33cb42ac63",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by ApiFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by ApiFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "ClickStreamApiApiFunctionLogRetention7FE12571": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "ClickStreamApiApiFunction684A4D61"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ApiFunction/LogRetention/Resource"
   }
  },
  "ClickStreamApiLogGroup4497C29B": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "clickstream-loggroup-",
       {
        "Fn::Select": [
         0,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "RetentionInDays": 180
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/LogGroup/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
      }
     ]
    }
   }
  },
  "ClickStreamApi748490D9": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "EndpointConfiguration": {
     "Types": [
      "REGIONAL"
     ]
    },
    "Name": "ClickStreamApi"
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Resource"
   }
  },
  "ClickStreamApiCloudWatchRole5F1F73C6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ],
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-CloudWatchRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/CloudWatchRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "ClickStreamApiAccount2E4BAA6C": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "ClickStreamApiCloudWatchRole5F1F73C6",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "ClickStreamApi748490D9"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Account"
   }
  },
  "ClickStreamApiDeploymentB63E2217425b193204363d2c31eaca1e9d46f87b": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "ClickStreamApi748490D9"
    }
   },
   "DependsOn": [
    "ClickStreamApiproxyANY2008788F",
    "ClickStreamApiproxyC314E806",
    "ClickStreamApiANY82946512"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Deployment/Resource"
   }
  },
  "ClickStreamApiDeploymentStageapi40499B1B": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "AccessLogSetting": {
     "DestinationArn": {
      "Fn::GetAtt": [
       "ClickStreamApiLogGroup4497C29B",
       "Arn"
      ]
     },
     "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.resourcePath $context.protocol\" $context.status $context.responseLength $context.requestId"
    },
    "DeploymentId": {
     "Ref": "ClickStreamApiDeploymentB63E2217425b193204363d2c31eaca1e9d46f87b"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "LoggingLevel": "ERROR",
      "MetricsEnabled": true,
      "ResourcePath": "/*"
     }
    ],
    "RestApiId": {
     "Ref": "ClickStreamApi748490D9"
    },
    "StageName": "api",
    "TracingEnabled": true
   },
   "DependsOn": [
    "ClickStreamApiAccount2E4BAA6C"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/DeploymentStage.api/Resource"
   }
  },
  "ClickStreamApiproxyC314E806": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ClickStreamApi748490D9",
      "RootResourceId"
     ]
    },
    "PathPart": "{proxy+}",
    "RestApiId": {
     "Ref": "ClickStreamApi748490D9"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Default/{proxy+}/Resource"
   }
  },
  "ClickStreamApiproxyANYApiPermissioncloudfronts3controlplanestackglobalClickStreamApiFB563409ANYproxyB6BDB120": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ClickStreamApiApiFunction684A4D61",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ClickStreamApi748490D9"
       },
       "/",
       {
        "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Default/{proxy+}/ANY/ApiPermission.cloudfronts3controlplanestackglobalClickStreamApiFB563409.ANY..{proxy+}"
   }
  },
  "ClickStreamApiproxyANYApiPermissionTestcloudfronts3controlplanestackglobalClickStreamApiFB563409ANYproxy93DB539B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ClickStreamApiApiFunction684A4D61",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ClickStreamApi748490D9"
       },
       "/test-invoke-stage/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Default/{proxy+}/ANY/ApiPermission.Test.cloudfronts3controlplanestackglobalClickStreamApiFB563409.ANY..{proxy+}"
   }
  },
  "ClickStreamApiproxyANY2008788F": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "CUSTOM",
    "AuthorizerId": {
     "Ref": "JWTAuthorizerE8D8D90E"
    },
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ClickStreamApiApiFunction684A4D61",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "ClickStreamApiproxyC314E806"
    },
    "RestApiId": {
     "Ref": "ClickStreamApi748490D9"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Default/{proxy+}/ANY/Resource"
   }
  },
  "ClickStreamApiANYApiPermissioncloudfronts3controlplanestackglobalClickStreamApiFB563409ANY5A5D2F49": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ClickStreamApiApiFunction684A4D61",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ClickStreamApi748490D9"
       },
       "/",
       {
        "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
       },
       "/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Default/ANY/ApiPermission.cloudfronts3controlplanestackglobalClickStreamApiFB563409.ANY.."
   }
  },
  "ClickStreamApiANYApiPermissionTestcloudfronts3controlplanestackglobalClickStreamApiFB563409ANY453C9088": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ClickStreamApiApiFunction684A4D61",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "ClickStreamApi748490D9"
       },
       "/test-invoke-stage/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Default/ANY/ApiPermission.Test.cloudfronts3controlplanestackglobalClickStreamApiFB563409.ANY.."
   }
  },
  "ClickStreamApiANY82946512": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "CUSTOM",
    "AuthorizerId": {
     "Ref": "JWTAuthorizerE8D8D90E"
    },
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ClickStreamApiApiFunction684A4D61",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "ClickStreamApi748490D9",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "ClickStreamApi748490D9"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/Default/ANY/Resource"
   }
  },
  "ClickStreamApiClickStreamApiUsagePlan731D8407": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "ClickStreamApi748490D9"
      },
      "Stage": {
       "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
      },
      "Throttle": {}
     }
    ],
    "Throttle": {
     "BurstLimit": 100,
     "RateLimit": 50
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ClickStreamApi/ClickStreamApi/ClickStreamApiUsagePlan/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-01efdd8aServiceRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:PutRetentionPolicy",
        "logs:DeleteRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Policy is generated by CDK built-in LogRetention, * logs resources for read only access or IAM limitation."
      }
     ]
    }
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs18.x",
    "Timeout": 900,
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
    "aws:asset:path": "asset.4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by CDK built-in LogRetention for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by CDK built-in LogRetention for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "PermissionsBoundary": {
     "Fn::If": [
      "isEmptyPermissionBoundary",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Ref": "IamRoleBoundaryArn"
      }
     ]
    },
    "RoleName": {
     "Fn::If": [
      "isEmptyRolePrefix",
      {
       "Ref": "AWS::NoValue"
      },
      {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "IamRolePrefix"
         },
         "-82bd2287ServiceRole-",
         {
          "Ref": "AWS::Region"
         },
         "-",
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               2,
               {
                "Fn::Split": [
                 "/",
                 {
                  "Ref": "AWS::StackId"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AWS679f53fac002430cb0da5b7982bd2287/ServiceRole/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Set the role name with prefix"
      }
     ]
    }
   }
  },
  "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "clickstream-analytics-on-aws/v1.1.6/97f30e67419a1676a2215492723e5add1aa491caf0cbe2dd878fc4fab0468cd4.zip"
    },
    "Environment": {
     "Variables": {
      "USER_AGENT_STRING": "AWSSOLUTION/SO0219/v1.1.6-202406280046"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 60
   },
   "DependsOn": [
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
   ],
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AWS679f53fac002430cb0da5b7982bd2287/Resource",
    "aws:asset:path": "asset.97f30e67419a1676a2215492723e5add1aa491caf0cbe2dd878fc4fab0468cd4",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "Lambda function is only used by AddAdminUserFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
      },
      {
       "id": "W92",
       "reason": "Lambda function is only used by AddAdminUserFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
      }
     ]
    }
   }
  },
  "AWS679f53fac002430cb0da5b7982bd2287LogRetentionCE72797A": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "AWS679f53fac002430cb0da5b7982bd22872D164C4C"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/AWS679f53fac002430cb0da5b7982bd2287/LogRetention/Resource"
   }
  },
  "ApiGatewayOriginRequestPolicy339DF282": {
   "Type": "AWS::CloudFront::OriginRequestPolicy",
   "Properties": {
    "OriginRequestPolicyConfig": {
     "Comment": "Policy to forward all parameters in viewer requests except for the Host header",
     "CookiesConfig": {
      "CookieBehavior": "all"
     },
     "HeadersConfig": {
      "HeaderBehavior": "allExcept",
      "Headers": [
       "host"
      ]
     },
     "Name": {
      "Fn::Join": [
       "",
       [
        "ApiGatewayOriginRequestPolicy-",
        {
         "Ref": "AWS::Region"
        },
        "-",
        {
         "Fn::Select": [
          0,
          {
           "Fn::Split": [
            "-",
            {
             "Fn::Select": [
              2,
              {
               "Fn::Split": [
                "/",
                {
                 "Ref": "AWS::StackId"
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      ]
     },
     "QueryStringsConfig": {
      "QueryStringBehavior": "all"
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/ApiGatewayOriginRequestPolicy/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/3VU0XbaMAz9lr27Hm33AzRtt54DWxba7ZEjHBFcEju1ZCjLyb/v2AkkbPQlupIt2bq6zo28/jKRk0+wpyuVb69KvZLNgkFtBexp2dCtbO682iKLZG161JnUllodhnDvd84dELZCldbna2cNy+bRG8XampBwwhlSbQ3hN4QcHQ0lP1z44XShzVQpJEqsYWdLkYDa4LBl7N5rYqdXPp42zn3K0bDmLiFc8zFc86MdF8pk+OaR+N+bnYVbQbfLJse6tIcKDcuOnPtTQAARMslpMK0ooVrlIJtkbWZwQPcLHYUTF9oUJbIdiLvIZrI2KbpKU0x62KHhhfVO4RzqWpsibLgQHR/VCg2VbDJbYhxDsEOLx66ULYxmK5sXQpfaMIK1OeEjuLcVaDNe6iNHNyl14GC04f9IsK0obUGymdniq7O+DusnPLNFhhxGFW7fMbg0NsdXkt+jOfEDtS6AcQ8H2TzbLZqp5411+g+6UHLkzWKZDImnte71eIRTpaw3LEZTDAoZvAVDEdnrQIYU6Q5PQqTOvh+Okb5wh+fIG5uHUI9eCApMS+gZ7J1W5AcDlc1XsnmGVTemCFpBjPW6b5aWDLQNpMVWnszOblEsGOsjHbRgcPzwjsp33J2lyyYFIvEbNItkY7UKycA4B7XR5tje4M+hbgUGcZFsMt/Lx8drvZFsfnr0MdaB+B2ENXLbViSe2FYXWQqv1Zpcx3n2wy6DfpewJ1VqOd1TUuooaRFfVRhC1P5Z0dTZnc7RxaGMq6fgoELuFBH7UDFx6fpNgZk+WYTDzsq28UfgufZRFP0La0XQo3ylz7ubiby+kZNPr6T1lfOGdYUy6+xfPjjvyIwFAAA="
   },
   "Metadata": {
    "aws:cdk:path": "cloudfront-s3-control-plane-stack-global/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "cloudfrontcontrolplanenotOpsInRegionFA8E79C7": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    }
   ]
  },
  "IsEmptyRolePrefixCondition": {
   "Fn::Equals": [
    {
     "Ref": "IamRolePrefix"
    },
    ""
   ]
  },
  "isEmptyRolePrefix": {
   "Fn::Equals": [
    {
     "Ref": "IamRolePrefix"
    },
    ""
   ]
  },
  "isEmptyPermissionBoundary": {
   "Fn::Equals": [
    {
     "Ref": "IamRoleBoundaryArn"
    },
    ""
   ]
  },
  "AWSCNCondition": {
   "Fn::Equals": [
    "aws-cn",
    {
     "Ref": "AWS::Partition"
    }
   ]
  },
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "Email": {
   "Type": "String",
   "AllowedPattern": "^^(?=.{0,320}$)\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$",
   "ConstraintDescription": "Email address must match pattern ^(?=.{0,320}$)\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*",
   "Description": "Email address of admin user "
  },
  "IamRolePrefix": {
   "Type": "String",
   "Default": "",
   "AllowedPattern": "^([a-zA-Z][a-zA-Z0-9-_]{1,20})?$",
   "Description": "The prefix of the IAM Roles created in the solution."
  },
  "IamRoleBoundaryArn": {
   "Type": "String",
   "Default": "",
   "Description": "Set permissions boundaries for the IAM Roles created in the solution."
  }
 },
 "Rules": {
  "CognitoUnsupportedRegionRule": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Or": [
       {
        "Fn::Or": [
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "us-east-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "us-east-2"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "us-west-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "us-west-2"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "ca-central-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "sa-east-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "eu-west-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "eu-west-2"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "eu-west-3"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "eu-central-1"
          ]
         }
        ]
       },
       {
        "Fn::Or": [
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "ap-northeast-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "ap-northeast-2"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "ap-southeast-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "ap-southeast-2"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "ap-south-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "eu-north-1"
          ]
         },
         {
          "Fn::Equals": [
           {
            "Ref": "AWS::Region"
           },
           "me-south-1"
          ]
         }
        ]
       }
      ]
     },
     "AssertDescription": "Cognito is not supported in current region. Please use correct CloudFormation template and try again."
    }
   ]
  }
 },
 "Outputs": {
  "ClickStreamApiEndpoint5F7E3E22": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ClickStreamApi748490D9"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
      },
      "/"
     ]
    ]
   }
  },
  "ControlPlaneURL": {
   "Description": "The url of clickstream console",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "cloudfrontcontrolplanePortalDistributionCAE911E8",
        "DomainName"
       ]
      }
     ]
    ]
   }
  },
  "ControlPlaneBucket": {
   "Description": "Bucket to store solution console data and services logs",
   "Value": {
    "Ref": "ClickstreamSolutionDataBucket200465FE"
   }
  }
 },
 "Mappings": {
  "ServiceprincipalMap": {
   "af-south-1": {
    "states": "states.af-south-1.amazonaws.com"
   },
   "ap-east-1": {
    "states": "states.ap-east-1.amazonaws.com"
   },
   "ap-northeast-1": {
    "states": "states.ap-northeast-1.amazonaws.com"
   },
   "ap-northeast-2": {
    "states": "states.ap-northeast-2.amazonaws.com"
   },
   "ap-northeast-3": {
    "states": "states.ap-northeast-3.amazonaws.com"
   },
   "ap-south-1": {
    "states": "states.ap-south-1.amazonaws.com"
   },
   "ap-south-2": {
    "states": "states.ap-south-2.amazonaws.com"
   },
   "ap-southeast-1": {
    "states": "states.ap-southeast-1.amazonaws.com"
   },
   "ap-southeast-2": {
    "states": "states.ap-southeast-2.amazonaws.com"
   },
   "ap-southeast-3": {
    "states": "states.ap-southeast-3.amazonaws.com"
   },
   "ap-southeast-4": {
    "states": "states.ap-southeast-4.amazonaws.com"
   },
   "ca-central-1": {
    "states": "states.ca-central-1.amazonaws.com"
   },
   "cn-north-1": {
    "states": "states.cn-north-1.amazonaws.com"
   },
   "cn-northwest-1": {
    "states": "states.cn-northwest-1.amazonaws.com"
   },
   "eu-central-1": {
    "states": "states.eu-central-1.amazonaws.com"
   },
   "eu-central-2": {
    "states": "states.eu-central-2.amazonaws.com"
   },
   "eu-north-1": {
    "states": "states.eu-north-1.amazonaws.com"
   },
   "eu-south-1": {
    "states": "states.eu-south-1.amazonaws.com"
   },
   "eu-south-2": {
    "states": "states.eu-south-2.amazonaws.com"
   },
   "eu-west-1": {
    "states": "states.eu-west-1.amazonaws.com"
   },
   "eu-west-2": {
    "states": "states.eu-west-2.amazonaws.com"
   },
   "eu-west-3": {
    "states": "states.eu-west-3.amazonaws.com"
   },
   "il-central-1": {
    "states": "states.il-central-1.amazonaws.com"
   },
   "me-central-1": {
    "states": "states.me-central-1.amazonaws.com"
   },
   "me-south-1": {
    "states": "states.me-south-1.amazonaws.com"
   },
   "sa-east-1": {
    "states": "states.sa-east-1.amazonaws.com"
   },
   "us-east-1": {
    "states": "states.us-east-1.amazonaws.com"
   },
   "us-east-2": {
    "states": "states.us-east-2.amazonaws.com"
   },
   "us-gov-east-1": {
    "states": "states.us-gov-east-1.amazonaws.com"
   },
   "us-gov-west-1": {
    "states": "states.us-gov-west-1.amazonaws.com"
   },
   "us-iso-east-1": {
    "states": "states.amazonaws.com"
   },
   "us-iso-west-1": {
    "states": "states.amazonaws.com"
   },
   "us-isob-east-1": {
    "states": "states.amazonaws.com"
   },
   "us-west-1": {
    "states": "states.us-west-1.amazonaws.com"
   },
   "us-west-2": {
    "states": "states.us-west-2.amazonaws.com"
   }
  }
 }
}